jobs:
- job: BuildBaseExe
  timeoutInMinutes: 0
  strategy:
    matrix:
      linux_arm64:
        imageName: 'ubuntu-20.04'
        arch: 'linux/arm64'
        node: '20.18.0'

      linux_amd64:
        imageName: 'ubuntu-20.04'
        arch: 'linux/amd64'
        node: '20.18.0'
        ptrcompress: false

      linux_amd64_ptrc:
        imageName: 'ubuntu-20.04'
        arch: 'linux/amd64'
        node: '20.18.0'
        ptrcompress: true

      windows_2019:
        imageName: 'windows-2019'
        node: '20.18.0'
        ptrcompress: false
      windows_2019_ptrc:
        imageName: 'windows-2019'
        node: '20.18.0'
        ptrcompress: true

      # mac:
      #   imageName: 'macos-10.14'
      #   node: '18.15.0'

      # windows_2015:
      #   imageName: 'vs2017-win2016'
#      alpine:
#        imageName: 'ubuntu-16.04'
  pool:
    vmImage: $(imageName)
  steps:
  - task: UsePythonVersion@0
    displayName: Setup Python
    inputs:
      versionSpec: '3.9'
      architecture: 'x64'
  - task: NodeTool@0
    displayName: Install Node
    inputs:
      versionSpec: '10.x'
  # - script: sudo apt-get update && sudo apt-get install -y gcc-4.9 g++-4.9
  #   condition: contains(variables['Agent.JobName'], 'linux')
  #   displayName: Install Linux build dependencies
  #- script: choco install visualcpp-build-tools --version 14.0.25420.1 -fy && npm config set msvs_version 2015
  #  condition: contains(variables['Agent.JobName'], 'windows_2015')
  #  displayName: Install Windows build dependencies
  - script: choco install nasm -fy
    displayName: Install Windows Assembler (NASM)
    condition: contains(variables['Agent.JobName'], 'windows')
    continueOnError: false
  - script: npm ci
    displayName: Install dependencies
    continueOnError: false
  - script: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    displayName: setup docker for multi platform
    condition: contains(variables['Agent.JobName'], 'linux')
  ## linux builds
  - script: node js2bin.js --ci --container=true --pointer-compress=$(ptrcompress) --node=$(node) --size=6MB --size=4MB --upload --clean --arch=${ARCH}
    displayName: Build base node binaries linux
    condition: contains(variables['Agent.JobName'], 'linux')
    continueOnError: false
    env:
      GITHUB_TOKEN: $(PersonalGithubToken)
      ARCH: $(arch)
  ## non-linux builds
  - script: node js2bin.js --ci --container=true --pointer-compress=$(ptrcompress) --node=$(node) --size=6MB --size=4MB --upload --clean
    displayName: Build base node binaries non-linux
    condition: not(contains(variables['Agent.JobName'], 'linux'))
    continueOnError: false
    env:
      GITHUB_TOKEN: $(PersonalGithubToken)

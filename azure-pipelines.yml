jobs:
- job: BuildBaseExe
  timeoutInMinutes: 0
  strategy:
    matrix:
      # We currently build this outside Azure because it is so slow it goes over the 6h job limit there.
      # linux_arm64:
      #   imageName: 'ubuntu-20.04'
      #   arch: 'linux/arm64'
      #   node: '20.18.0'

      linux_amd64:
        imageName: 'ubuntu-20.04'
        arch: 'linux/amd64'
        node: '22.14.0'
        ptrcompress: false

      linux_amd64_ptrc:
        imageName: 'ubuntu-20.04'
        arch: 'linux/amd64'
        node: '22.14.0'
        ptrcompress: true

      windows_2022:
        imageName: 'windows-2022'
        node: '22.14.0'
        ptrcompress: false
      windows_2022_ptrc:
        imageName: 'windows-2022'
        node: '22.14.0'
        ptrcompress: true

      macos_arm64:
        imageName: 'macOS-15'
        node: '22.14.0'
        arch: 'arm64'
        ptrcompress: false
      macos_x64:
        imageName: 'macOS-15'
        node: '22.14.0'
        arch: 'x64'
        ptrcompress: false

      # Pointer Compression builds are failing on MacOS with 20.18.0, have not dug into why
      # macos_arm64_ptrc:
      #   imageName: 'macOS-15'
      #   node: '20.18.0'
      #   arch: 'arm64'
      #   ptrcompress: true
      # macos_x64_ptrc:
      #   imageName: 'macOS-15'
      #   node: '20.18.0'
      #   arch: 'x64'
      #   ptrcompress: true

  pool:
    vmImage: $(imageName)

  variables:
    # Do not attempt to upload to the Github Release when building a PR
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      ci_args: ''
    ${{ else }}:
      ci_args: '--upload'

  steps:
  - task: UsePythonVersion@0
    displayName: Setup Python
    inputs:
      versionSpec: '3.9'
      architecture: 'x64'
  - task: NodeTool@0
    displayName: Install Node
    inputs:
      versionSpec: '10.x'
  # - script: sudo apt-get update && sudo apt-get install -y gcc-4.9 g++-4.9
  #   condition: contains(variables['Agent.JobName'], 'linux')
  #   displayName: Install Linux build dependencies
  #- script: choco install visualcpp-build-tools --version 14.0.25420.1 -fy && npm config set msvs_version 2015
  #  condition: contains(variables['Agent.JobName'], 'windows_2015')
  #  displayName: Install Windows build dependencies
  - script: choco install nasm -fy
    displayName: Install Windows Assembler (NASM)
    condition: contains(variables['Agent.JobName'], 'windows')
  - powershell: |
      Write-Host "Freeing disk space on Azure Pipelines Windows Agent..."

      # Remove .NET SDKs
      Remove-Item -Recurse -Force "C:\Program Files\dotnet" -ErrorAction SilentlyContinue
      Remove-Item -Recurse -Force "C:\Program Files (x86)\dotnet" -ErrorAction SilentlyContinue

      # Remove Java SDKs
      Remove-Item -Recurse -Force "C:\Program Files\Java" -ErrorAction SilentlyContinue
      Remove-Item -Recurse -Force "C:\Program Files (x86)\Java" -ErrorAction SilentlyContinue

      # Remove Chocolatey packages
      Remove-Item -Recurse -Force "C:\ProgramData\chocolatey\lib" -ErrorAction SilentlyContinue

      # Optional: Remove Android SDK (if not needed)
      Remove-Item -Recurse -Force "C:\Android" -ErrorAction SilentlyContinue

      # Remove Windows Temp Files
      Remove-Item -Recurse -Force "$env:LOCALAPPDATA\Temp" -ErrorAction SilentlyContinue

      # Free unused cache space from npm
      if (Test-Path "$env:APPDATA\npm-cache") {
        Remove-Item -Recurse -Force "$env:APPDATA\npm-cache" -ErrorAction SilentlyContinue
      }

      # Run garbage collection to clean up memory
      [System.GC]::Collect()
    displayName: Free disk space on Windows
    condition: contains(variables['Agent.JobName'], 'windows')
  - script: npm ci
    displayName: Install dependencies
  - script: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    displayName: setup docker for multi platform
    condition: contains(variables['Agent.JobName'], 'linux')
  ## linux and macos builds
  - script: node js2bin.js --ci --container=true --pointer-compress=$(ptrcompress) --node=$(node) --size=6MB --size=4MB --clean --arch=$(arch) --cache $(ci_args)
    displayName: Build base node binaries linux or macos
    condition: or(contains(variables['Agent.JobName'], 'linux'), contains(variables['Agent.JobName'], 'macos'))
    env:
      GITHUB_TOKEN: $(PersonalGithubToken)
  ## other builds
  - script: node js2bin.js --ci --container=true --pointer-compress=$(ptrcompress) --node=$(node) --size=6MB --size=4MB --clean --cache $(ci_args)
    displayName: Build base node binaries non-linux
    condition: not(or(contains(variables['Agent.JobName'], 'linux'), contains(variables['Agent.JobName'], 'macos')))
    env:
      GITHUB_TOKEN: $(PersonalGithubToken)
  # keep the built binaries
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: cache
      artifact: $(System.JobName)
      publishLocation: pipeline